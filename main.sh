#!/bin/bash

# Load environment variables
source ENV/general.env

# Ensure the script runs as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root."
    exit 1
fi

# Define an array of directories to check
declare -a folders_to_check=("DATA" "ENV" "SCRIPTS")

# Check each directory in the list
for folder in "${folders_to_check[@]}"; do
    if [ ! -d "$folder" ]; then
        echo "$folder does not exist."
    fi
done

# Function to clean the DATA folder
clean_data_folder() {
    read -p "Clean DATA folder? (Y/N) [N]: " response
    response=${response:-N}
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        rm -rf DATA/*
        echo "DATA folder has been cleaned."
    else
        echo "DATA folder cleanup skipped."
    fi
}

# Invoke the clean DATA folder function
clean_data_folder

# Function to ask for and update IP address
ask_for_ip() {
    while true; do
        read -p "Enter IP (leave empty to not change): " new_ip
        if [ -z "$new_ip" ]; then
            echo "IP not updated. Current IP is: $IP"
            return
        elif [[ $new_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            sed -i '/^IP="/d' ENV/general.env
            echo "IP=\"$new_ip\"" >> ENV/general.env
            echo "New IP set to $new_ip"
            return
        else
            echo "Invalid IP format. Please try again."
        fi
    done
}

# Ask for IP address update
ask_for_ip

# Function to prompt user and run a specified script
run_script() {
    local script_name=$1
    read -p "Run $script_name? (Y/N) [N]: " response
    response=${response:-N}
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo "$script_name launching."
        /bin/bash SCRIPTS/"$script_name".sh
    else
        echo "$script_name skipped."
    fi
}

# Invoke the function for each script
run_script NMAP
run_script HTTP_DIR_FINDER
run_script SMB_ENUM
run_script 21_ANONYMOUS_FTP_ALLOWED
run_script WINDOWS_BOX_TEST

echo "Done"
